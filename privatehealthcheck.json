{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Route53 Health Check",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "ROUTE53 HEALTH CHECK FOR PRIVATE RESOURCES"
                    },
                    "Parameters": [
                        "protocol",
                        "ResourceIPaddress",
                        "port",
                        "path",
                        "subnets",
                        "vpc"
                    ]
                }
            ],
            "ParameterLabels": {
                "ResourceIPaddress": {
                    "default": "IP address or Domain Name"
                },
                "protocol": {
                    "default": "Protocol"
                },
                "port": {
                    "default": "Port"
                },
                "path": {
                    "default": "Path / (Optional)"
                },
                "subnets": {
                    "default": "Health Checker Subnet (Must be a private subnet with access to internet and the resource)"
                },
                "vpc": {
                    "default": "VPC"
                }
            }
        }
    },
    "Parameters": {
        "protocol": {
            "Description": "Enter the protocol.",
            "Type": "String",
            "Default": "TCP",
            "AllowedValues": [
                "TCP",
                "HTTP",
                "HTTPS"
            ]
        },
        "ResourceIPaddress": {
            "Type": "String",
            "Description": "Enter the IP address or Domain name of the resource."
        },
        "port": {
            "Type": "Number",
            "Description": "Enter the port number of the resource."
        },
        "path": {
            "Type": "String",
            "Description": "Enter the Path (Optional). Used only with HTTP and HTTPS health checks."
        },
        "subnets": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Select the subnet for the health checker."
        },
        "vpc": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "Select the VPC for the health checker. Must be in the same VPC with the resource."
        }
    },
    "Conditions": {
        "TCP": {
            "Fn::Equals": [
                {
                    "Ref": "protocol"
                },
                "TCP"
            ]
        },
        "HTTP": {
            "Fn::Equals": [
                {
                    "Ref": "protocol"
                },
                "HTTP"
            ]
        },
        "HTTPS": {
            "Fn::Equals": [
                {
                    "Ref": "protocol"
                },
                "HTTPS"
            ]
        }
    },
    "Resources": {
        "BONNYCAMP": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": {
                    "Fn::Sub": "${protocol}: ${AWS::StackName}"
                },
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Route53HealthCheck"
                    }
                ],
                "VpcId": {
                    "Ref": "vpc"
                }
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "KADUNA",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:PutLogEvents",
                                        "logs:CreateLogStream",
                                        "logs:CreateLogGroup",
                                        "logs:DescribeLogStreams",
                                        "cloudwatch:PutMetricData",
                                        "ec2:CreateNetworkInterface",
                                        "ec2:DescribeNetworkInterfaces",
                                        "ec2:DeleteNetworkInterface",
                                        "lambda:*"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LAGOS": {
            "Condition": "TCP",
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import json",
                                "import boto3",
                                "import socket",
                                "import time",
                                "from botocore.vendored import requests",
                                "import logging",
                                "logger = logging.getLogger()",
                                "logger.setLevel(logging.ERROR)",
                                "def lambda_handler(event, context):",
                                "    cloudwatch = boto3.client('cloudwatch')",
                                "    lambdah = boto3.client('lambda')",
                                {
                                    "Fn::Sub": "    protocol = \"${protocol}\""
                                },
                                {
                                    "Fn::Sub": "    healthcheckname = \"${AWS::StackName}\""
                                },
                                {
                                    "Fn::Sub": "    host = \"${ResourceIPaddress}\""
                                },
                                {
                                    "Fn::Sub": "    port = ${port}"
                                },
                                "    for i in range(30):",
                                "        try:",
                                "            socket.socket(socket.AF_INET, socket.SOCK_STREAM).settimeout(4)",
                                "            socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((host, port))",
                                "            metric = 1",
                                "            print \"The TCP connection was successful\"",
                                "            response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'TCP: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "        except socket.error as e:",
                                "            metric = 0",
                                "            response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'TCP: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "            print \"The TCP connection was unsuccessful because the connection was refused by \" + host + \" or the domain name (where provided) did not resolve. Ensure the host is listening for TCP connections and DNS resolves correctly.\"",
                                "        except socket.timeout as e:",
                                "            metric = 0",
                                "            response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'TCP: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "            print \"The TCP connection was unsuccessful because \" + host + \" did not respond within the timeout period of 4 seconds.\"",
                                "        except socket.giaerror as e:",
                                "            metric = 0",
                                "            response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'TCP: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "            logger.error(\"Error: \" + str(e))",
                                "        except socket.herror as e:",
                                "            metric = 0",
                                "            response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'TCP: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "            logger.error(\"Error: \" + str(e))",
                                "        time.sleep(2)"
                            ]
                        ]
                    }
                },
                "FunctionName": {
                    "Ref": "AWS::StackName"
                },
                "Handler": "index.lambda_handler",
                "Runtime": "python2.7",
                "Timeout": "120",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "VpcConfig": {
                    "SecurityGroupIds": [
                        {
                            "Ref": "BONNYCAMP"
                        }
                    ],
                    "SubnetIds": [
                        {
                            "Ref": "subnets"
                        }
                    ]
                }
            }
        },
        "SURULERE": {
            "Condition": "TCP",
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Route53 Health Check",
                "Name": {
                            "Ref": "AWS::StackName"
                        },
                "ScheduleExpression": "rate(1 minute)",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Id": "SURULERE",
                        "Arn": {
                            "Fn::GetAtt": [
                                "LAGOS",
                                "Arn"
                            ]
                        }
                    }
                ]
            }
        },
        "YABA": {
            "Condition": "TCP",
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "AWS::StackName"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "SURULERE",
                        "Arn"
                    ]
                }
            }
        },
        "DELTA": {
            "Condition": "HTTP",
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import json",
                                "import boto3",
                                "import time",
                                "from botocore.vendored import requests",
                                "import logging",
                                "logger = logging.getLogger()",
                                "logger.setLevel(logging.ERROR)",
                                "def lambda_handler(event, context):",
                                "    cloudwatch = boto3.client('cloudwatch')",
                                "    lambdah = boto3.client('lambda')",
                                {
                                    "Fn::Sub": "    protocol = \"${protocol}\""
                                },
                                {
                                    "Fn::Sub": "    healthcheckname = \"${AWS::StackName}\""
                                },
                                {
                                    "Fn::Sub": "    domainname = \"${ResourceIPaddress}\""
                                },
                                {
                                    "Fn::Sub": "    url = \"http://${ResourceIPaddress}:${port}/${path}\""
                                },
                                "    x = 1",
                                "    while x <=30:",
                                "        try:",
                                "            r = requests.get(url, timeout=3)",
                                "            if r.status_code >= 200 and r.status_code <= 399:",
                                "                metric = 1",
                                "                print \"The HTTP GET Request was successful.\"",
                                "                print \"The HTTP response code is: \" + str(r.status_code)",
                                "                response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'HTTP: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "            else:",
                                "                metric = 0",
                                "                print \"The HTTP GET Request was not successful because it received a HTTP Client Side or Server Side Error Code.\"",
                                "                print \"The HTTP response code is: \" + str(r.status_code)",
                                "                response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'HTTP: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "        except requests.exceptions.HTTPError as e:",
                                "            metric = 0",
                                "            response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'HTTP: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "            logger.error(\"Error: \" + str(e))",
                                "        except requests.exceptions.ConnectionError as e:",
                                "            metric = 0",
                                "            response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'HTTP: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "            if str(e) == \"('Connection aborted.', gaierror(-2, 'Name or service not known'))\":",
                                "                print \"The domain name \"\" + domainname + \"\" does not resolve to an IP address. Kindly ensure the domain name resolves in the VPC.\"",
                                "            elif str(e) == \"('Connection aborted.', error(111, 'Connection refused'))\":",
                                "                print \"The connection was refused by the endpoint. Please check if the endpoint is listening for HTTP connections on the correct port.\"",
                                "            else:",
                                "                logger.error(\"Error: \" + str(e))",
                                "        except requests.exceptions.Timeout as e:",
                                "            metric = 0",
                                "            response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'HTTP: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "            print \"The HTTP/HTTPS connection timed out because we did not receive a HTTP response within the 2 seconds timeout period.\"",
                                "        except requests.exceptions.TooManyRedirects as e:",
                                "            metric = 0",
                                "            response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'HTTP: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "            logger.error(\"Error: \" + str(e))",
                                "        x += 1",
                                "        time.sleep(2)"
                            ]
                        ]
                    }
                },
                "FunctionName": {
                    "Ref": "AWS::StackName"
                },
                "Handler": "index.lambda_handler",
                "Runtime": "python2.7",
                "Timeout": "120",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "VpcConfig": {
                    "SecurityGroupIds": [
                        {
                            "Ref": "BONNYCAMP"
                        }
                    ],
                    "SubnetIds": [
                        {
                            "Ref": "subnets"
                        }
                    ]
                }
            }
        },
        "ASABA": {
            "Condition": "HTTP",
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Route53 Health Check",
                "Name": {
                            "Ref": "AWS::StackName"
                        },
                "ScheduleExpression": "rate(1 minute)",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Id": "ASABA",
                        "Arn": {
                            "Fn::GetAtt": [
                                "DELTA",
                                "Arn"
                            ]
                        }
                    }
                ]
            }
        },
        "WARRI": {
            "Condition": "HTTP",
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "AWS::StackName"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "ASABA",
                        "Arn"
                    ]
                }
            }
        },
        "ABIA": {
            "Condition": "HTTPS",
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "import json",
                                "import boto3",
                                "import time",
                                "from botocore.vendored import requests",
                                "import logging",
                                "logger = logging.getLogger()",
                                "logger.setLevel(logging.ERROR)",
                                "def lambda_handler(event, context):",
                                "    cloudwatch = boto3.client('cloudwatch')",
                                "    lambdah = boto3.client('lambda')",
                                {
                                    "Fn::Sub": "    protocol = \"${protocol}\""
                                },
                                {
                                    "Fn::Sub": "    healthcheckname = \"${AWS::StackName}\""
                                },
                                {
                                    "Fn::Sub": "    domainname = \"${ResourceIPaddress}\""
                                },
                                {
                                    "Fn::Sub": "    url = \"https://${ResourceIPaddress}:${port}/${path}\""
                                },
                                "    x = 1",
                                "    while x <=30:",
                                "        try:",
                                "            r = requests.get(url, timeout=3)",
                                "            if r.status_code >= 200 and r.status_code <= 399:",
                                "                metric = 1",
                                "                print \"The HTTPS GET Request was successful.\"",
                                "                print \"The HTTPS response code is: \" + str(r.status_code)",
                                "                response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'HTTPS: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "            else:",
                                "                metric = 0",
                                "                print \"The HTTPS GET Request was not successful because it received a HTTP Client Side or Server Side Error Code.\"",
                                "                print \"The HTTPS response code is: \" + str(r.status_code)",
                                "                response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'HTTPS: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "                time.sleep(1)",
                                "        except requests.exceptions.HTTPError as e:",
                                "            metric = 0",
                                "            response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'HTTPS: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "            logger.error(\"Error: \" + str(e))",
                                "        except requests.exceptions.ConnectionError as e:",
                                "            metric = 0",
                                "            response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'HTTPS: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "            if str(e) == \"('Connection aborted.', gaierror(-2, 'Name or service not known'))\":",
                                "                print \"The domain name \"\" + domainname + \"\" does not resolve to an IP address. Kindly ensure the domain name resolves in the VPC.\"",
                                "            elif str(e) == \"('Connection aborted.', error(111, 'Connection refused'))\":",
                                "                print \"The connection was refused by the endpoint. Please check if the endpoint is listening for HTTPS connections on the correct port.\"",
                                "            else:",
                                "                logger.error(\"Error: \" + str(e))",
                                "        except requests.exceptions.Timeout as e:",
                                "            metric = 0",
                                "            response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'HTTPS: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "            print \"The HTTP/HTTPS connection timed out because we did not receive a HTTP response within the 2 seconds timeout period.\"",
                                "        except requests.exceptions.TooManyRedirects as e:",
                                "            metric = 0",
                                "            response = cloudwatch.put_metric_data(Namespace = 'Route53PrivateHealthCheck', MetricData = [{'MetricName': 'HTTPS: ' + healthcheckname,'Unit': 'None','Value': metric},])",
                                "            logger.error(\"Error: \" + str(e))",
                                "        x += 1",
                                "        time.sleep(2)"
                            ]
                        ]
                    }
                },
                "FunctionName": {
                    "Ref": "AWS::StackName"
                },
                "Handler": "index.lambda_handler",
                "Runtime": "python2.7",
                "Timeout": "120",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "VpcConfig": {
                    "SecurityGroupIds": [
                        {
                            "Ref": "BONNYCAMP"
                        }
                    ],
                    "SubnetIds": [
                        {
                            "Ref": "subnets"
                        }
                    ]
                }
            }
        },
        "UMUAHIA": {
            "Condition": "HTTPS",
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Route53 Health Check",
                "Name": {
                            "Ref": "AWS::StackName"
                        },
                "ScheduleExpression": "rate(1 minute)",
                "State": "ENABLED",
                "Targets": [
                    {
                        "Id": "UMUAHIA",
                        "Arn": {
                            "Fn::GetAtt": [
                                "ABIA",
                                "Arn"
                            ]
                        }
                    }
                ]
            }
        },
        "OHAFIA": {
            "Condition": "HTTPS",
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Ref": "AWS::StackName"
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "UMUAHIA",
                        "Arn"
                    ]
                }
            }
        },
        "FELA": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Alarm for Route53 Health Check",
                "AlarmName": {
                    "Fn::Sub": "${protocol}: ${AWS::StackName}"
                },
                "MetricName": {
                    "Fn::Sub": "${protocol}: ${AWS::StackName}"
                },
                "Namespace": "Route53PrivateHealthCheck",
                "ComparisonOperator": "LessThanThreshold",
                "EvaluationPeriods": "1",
                "Period": "60",
                "Statistic": "Minimum",
                "Threshold": "1",
                "TreatMissingData": "breaching"
            }
        },
        "ABUJA": {
            "Type": "AWS::Route53::HealthCheck",
            "DependsOn": "FELA",
            "Properties": {
                "HealthCheckConfig": {
                    "AlarmIdentifier": {
                        "Name": {
                            "Fn::Sub": "${protocol}: ${AWS::StackName}"
                        },
                        "Region": {
                            "Ref": "AWS::Region"
                        }
                    },
                    "InsufficientDataHealthStatus": "Unhealthy",
                    "Type": "CLOUDWATCH_METRIC"
                },
                "HealthCheckTags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        }
    }
}